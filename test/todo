#!/usr/bin/env bats -p

source .env.test
load test-helpers

@test "'todo -h' prints help" {
  output=$(todo -h)
  [[ $output =~ "Usage:" ]]
}

@test "'todo --help' prints help" {
  output=$(todo --help)
  [[ $output =~ "Usage:" ]]
}


@test "'todo' when .todo exists, opens it for editing" {
  export EDITOR="echo 'Hello World' > "

  # Create project and link
  rm -f $PROJECT_DIR/test/fixtures/exists/.todo
  id=$( createProject | jq -r '.id' )
  ln -s "$HOME/.projectfs/mnt/$id" \
        $PROJECT_DIR/test/fixtures/exists/.todo


  { cd test/fixtures/exists/; todo; }

  [ -h $PROJECT_DIR/test/fixtures/exists/.todo ]
  cat $(realpath -m $PROJECT_DIR/test/fixtures/exists/.todo) 1>&2

  # Expect .todo to eq expected
  diff $(realpath -m $PROJECT_DIR/test/fixtures/exists/.todo) \
          $PROJECT_DIR/test/fixtures/exists/expected 1>&2
}

@test "'todo' when .todo exists, but links elsewhere, warns, does not open" {
  export EDITOR="exit 128;"
  cd test/fixtures/wrong-sym/
  run todo
  cd ../../../
  [[ $status -eq 1 ]]
  [[ $output =~ ".todo is not a 'todo' project" ]]
}

@test "'todo' when .todo does not exist, does not create a new project" {
  export EDITOR="vim -s commands"
  output=$( cd test/fixtures/empty/; todo; )
  [[ $output =~ "Create one with 'todo init'" ]]
  [[ ! -f test/fixtures/empty/.todo ]]
}

@test "'todo' when .todo is actual file, warns, does not open" {
  skip
}


