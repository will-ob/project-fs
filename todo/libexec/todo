#!/usr/bin/env bash
set -e

resolve_link() {
  $(type -p greadlink readlink | head -1) "$1"
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

libexec_path="$(abs_dirname "$0")"
export _TODO_ROOT="$(abs_dirname "$libexec_path")"
export PATH="${libexec_path}:$PATH"

command="$1"
case "$command" in
"" )
  # TODO - actually open link, or say no todo exists
  echo "Searching for todo..."
  todo_path=`pwd`/.todo
  if [ -L $todo_path ]; then
    # Symlink exists, does not point to projectfs
    todo_dir=$(readlink $todo_path | xargs realpath | xargs dirname)
    if [[ $todo_dir != $HOME/.projectfs/mnt ]]; then
      echo ".todo is not a 'todo' project"
      exit 1
    fi

    # Symlink exists, target exists
    if [ -z ${EDITOR+x} ]; then
      echo "EDITOR not set. Defaulting to vim"
      vim `pwd`/.todo
    else
      echo "EDITOR set to '$EDITOR'"
      cmd="$EDITOR `pwd`/.todo"
      echo "$cmd"
      eval "$cmd"
    fi
  elif [ -h $todo_path ]; then
    # Symlink exists, target does not
    echo "Todo file exists but could not be opened"
  elif [ -f $todo_path ]; then
    # Regular file exists
    echo "$todo_path is not a recognized todo-list"
  else
    # no file exists
    echo -e "This directory does not have a todo list.\nCreate one with 'todo init'"
  fi
  ;;

"-h" | "--help" )
  exec todo-help
  ;;
* )
  command_path="$(command -v "todo-$command" || true)"
  if [ ! -x "$command_path" ]; then
    echo "todo: no such command \`$command'" >&2
    exit 1
  fi

  shift
  exec "$command_path" "$@"
  ;;
esac
